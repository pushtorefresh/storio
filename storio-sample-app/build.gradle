apply plugin: 'com.android.application'
//apply plugin: 'com.squareup.sqldelight'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
//https://stackoverflow.com/a/51369831/4068957

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId 'com.pushtorefresh.storio.sample'
        minSdkVersion 15
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode 1
        versionName '1.0'

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    signingConfigs {
        sample {
            storeFile file('keystore.jks')
            storePassword 'sample'
            keyAlias 'sample'
            keyPassword 'sample'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.sample
            matchingFallbacks = ['release']
        }

        release {
            signingConfig signingConfigs.sample
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'InvalidPackage' // Dagger
        disable 'GoogleAppIndexingWarning'
    }

    packagingOptions {
        exclude 'LICENSE.txt' // multiple libs have this file -> cause build error
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

// Ensure the no-op dependency is always used in JVM tests.
configurations.all { config ->
    if (config.name.contains('UnitTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}
//
//sqldelight {
//    packageName = "com.pushtorefresh.storio.sample"
//    sourceSet = files("src/main/sqldelight")
//    schemaOutputDirectory = file("src/main/sqldelight/databases")
//}

dependencies {
    implementation libraries.storIOSQLite
    implementation libraries.storIOContentResolver

    implementation libraries.storIOSQLiteAnnotations
    kapt libraries.storIOSQLiteAnnotationsProcessor

    implementation libraries.storIOContentResolverAnnotations
    kapt libraries.storIOContentResolverAnnotationsProcessor

    implementation libraries.dagger
    kapt libraries.daggerCompiler

    implementation libraries.javaxInject
    implementation libraries.javaxAnnotationApi

    implementation libraries.rxJava2
    implementation libraries.rxAndroid2
    implementation libraries.appCompat
    implementation libraries.recyclerView
    implementation libraries.timber
    implementation libraries.butterKnife
    kapt libraries.butterKnife

//  Waiting for https://github.com/square/sqldelight/issues/1005
//  implementation libraries.sqlDelight

    compileOnly libraries.autoParcel
    kapt libraries.autoParcelProcessor

    debugImplementation libraries.leakCanary
    releaseImplementation libraries.leakCanaryNoOp

    testImplementation libraries.junit
    testImplementation libraries.assertJ
    testImplementation libraries.robolectric
    testImplementation libraries.leakCanaryNoOp
    //https://stackoverflow.com/a/68698150/4068957
    kaptTest libraries.butterKnife
}
